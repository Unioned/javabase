什么叫内部类：
    写在一个类里面的类叫做内部类
什么时候用内部类：
    B类时A类的一部分,但B单独存在没有意义
    例：汽车的发动机，人的心脏，ArrayList的迭代器等。。。
内部类访问特点:
    内部类可以直接访问外部类的成员,包括私有
    外部类访问内部类必须创建对象
内部类的分类：
    1.成员内部类
        ● 写在成员位置的，未被static修饰的,属于外部类的成员。
        ● 成员内部类可以被一-些修饰符所修饰，比如: private, 默认，protected, public, static等。
        ● 在成员内部类里面，JDK16之前不能定义静态变量, JDK 16开始才可以定义静态变量。
        获取成员内部类对象：
        方式一：
            当成员内部类被private修饰时，外部类编写方法，对外部提供内部类对象。
        方式二：
            当成员内部类被非私有修饰时，直接创建对象，
            格式：外部类名.内部类名 对象名 = 外部类对象[就是new 外部类名()].内部类对象[就是new 内部类名()];
        外部类成员变量和内部类成员变量重名时，在内部类的访问方式：
            System.out.print1n(Outer.this.变量名);
    2.静态内部类
        ● 静态内部类也是成员内部类的一种
        ● 静态内部类只能访问外部类中的静态变量和静态方法
        ● 如果想要访问非静态的需要创建对象。
        创建静态内部类对象的格式:
            外部类名.内部类名 对象名= new 外部类名.内部类名();
        调用静态内部类中的方法:
            非静态方法: 创建对象，用对象调用
            静态方法: 外部类名.内部类名.方法名()
    3.局部内部类
        1.将内部类定义在方法里面就叫做局部内部类，类似于方法里面的局部变量。
        2.外界是无法直接使用局部内部类，需要在方法内部创建对象并使用。
        3.该类可以直接访问外部类的成员，也可以访问方法内的局部变量。
    4.匿名内部类
        本质上就是隐藏了名字的内部类,可以写在成员位置(类中),也可写在局部位置(方法中)
        格式:
                new 类名或者接口名() {
                    重写方法;
                };
        说明：
            中括号{}之中的语句组成的是一个匿名内部类,
            类名或者接口名()表示的是匿名内部类继承/实现的那个类,
            这里new的对象是匿名内部类。
            这样就通过这种方式得到一个类或接口的子类的对象,免去在文件中再次新建子类。

            既然可以得到一个类的对象,那么自然就可以用来接收对象或者调用方法。
            接收对象：
                类名或者接口名 XXX = new 类名或者接口名() {
                                        重写方法;
                                    };
            调用方法：
                new 类名或者接口名() {
                    重写方法;
                }.方法();
        使用场景:
            当方法的参数是接口或者类时,
            以接口为例,匿名内部类可以传递这个接口的实现类对象,
            如果实现类只要使用一次,就可以用匿名内部类简化代码。